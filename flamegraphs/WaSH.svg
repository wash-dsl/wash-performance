<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1600" height="370" onload="init(evt)" viewBox="0 0 1600 370" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1600.0" height="370.0" fill="url(#background)"  />
<text id="title" x="800.00" y="24" >WaSH Flame Graph</text>
<text id="details" x="10.00" y="353" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1490.00" y="24" >Search</text>
<text id="ignorecase" x="1574.00" y="24" >ic</text>
<text id="matched" x="1490.00" y="353" > </text>
<g id="frames">
<g >
<title>[unknown] (296,496,638 samples, 0.05%)</title><rect x="10.0" y="87" width="0.9" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="114.5" ></text>
</g>
<g >
<title>compute_eos_hydro_std (164,368,580 samples, 0.03%)</title><rect x="989.3" y="187" width="0.4" height="49.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="992.27" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..34 (39,555,020 samples, 0.01%)</title><rect x="479.2" y="87" width="0.1" height="49.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="482.22" y="114.5" ></text>
</g>
<g >
<title>[unknown] (40,769,778 samples, 0.01%)</title><rect x="1589.9" y="137" width="0.1" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1592.88" y="164.5" ></text>
</g>
<g >
<title>__kmp_init_implicit_task (40,821,438 samples, 0.01%)</title><rect x="898.2" y="187" width="0.1" height="49.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="901.17" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..100 (3,088,952,726 samples, 0.57%)</title><rect x="470.1" y="87" width="9.0" height="49.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="473.14" y="114.5" ></text>
</g>
<g >
<title>__kmpc_fork_call (44,688,616 samples, 0.01%)</title><rect x="864.7" y="87" width="0.1" height="49.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="867.69" y="114.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (486,969,080 samples, 0.09%)</title><rect x="1165.3" y="187" width="1.4" height="49.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1168.25" y="214.5" ></text>
</g>
<g >
<title>[unknown] (49,957,246 samples, 0.01%)</title><rect x="469.8" y="87" width="0.1" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="472.76" y="114.5" ></text>
</g>
<g >
<title>[unknown] (35,378,350 samples, 0.01%)</title><rect x="469.6" y="137" width="0.1" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="472.63" y="164.5" ></text>
</g>
<g >
<title>compute_momentum_energy_std (132,603,650,366 samples, 24.34%)</title><rect x="480.2" y="137" width="384.5" height="49.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="483.16" y="164.5" >compute_momentum_energy_std</text>
</g>
<g >
<title>[unknown] (852,811,178 samples, 0.16%)</title><rect x="10.0" y="187" width="2.5" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="214.5" ></text>
</g>
<g >
<title>ilogb@plt (81,884,075 samples, 0.02%)</title><rect x="1163.3" y="187" width="0.2" height="49.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1166.28" y="214.5" ></text>
</g>
<g >
<title>update_smoothing_length (160,494,418 samples, 0.03%)</title><rect x="1171.4" y="187" width="0.5" height="49.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1174.45" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..47 (736,506,864 samples, 0.14%)</title><rect x="17.2" y="187" width="2.1" height="49.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="20.20" y="214.5" ></text>
</g>
<g >
<title>_dl_name_match_p (548,561,679 samples, 0.10%)</title><rect x="10.9" y="137" width="1.6" height="49.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.86" y="164.5" ></text>
</g>
<g >
<title>.omp_outlined..42 (81,997,067 samples, 0.02%)</title><rect x="17.0" y="187" width="0.2" height="49.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="19.96" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..136 (118,041,999 samples, 0.02%)</title><rect x="16.5" y="187" width="0.3" height="49.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="19.50" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..1 (202,852,233 samples, 0.04%)</title><rect x="15.6" y="187" width="0.6" height="49.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="18.57" y="214.5" ></text>
</g>
<g >
<title>opal_dss_copy (296,496,638 samples, 0.05%)</title><rect x="10.0" y="37" width="0.9" height="49.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="13.00" y="64.5" ></text>
</g>
<g >
<title>return_local_event_hdlr (49,957,246 samples, 0.01%)</title><rect x="469.8" y="37" width="0.1" height="49.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="472.76" y="64.5" ></text>
</g>
<g >
<title>cstone::buildOctreeCpu&lt;unsigned long&gt; (44,688,616 samples, 0.01%)</title><rect x="864.7" y="137" width="0.1" height="49.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="867.69" y="164.5" ></text>
</g>
<g >
<title>__kmp_dispatch_next_algorithm&lt;int&gt; (42,128,550 samples, 0.01%)</title><rect x="864.8" y="187" width="0.1" height="49.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="867.82" y="214.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;double  (41,054,079 samples, 0.01%)</title><rect x="1165.1" y="187" width="0.2" height="49.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1168.13" y="214.5" ></text>
</g>
<g >
<title>powf32x (276,865,521 samples, 0.05%)</title><rect x="1164.1" y="187" width="0.8" height="49.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1167.09" y="214.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (409,347,233 samples, 0.08%)</title><rect x="12.5" y="187" width="1.2" height="49.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="15.47" y="214.5" ></text>
</g>
<g >
<title>compute_iad (46,218,999,739 samples, 8.48%)</title><rect x="989.7" y="187" width="134.1" height="49.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="992.75" y="214.5" >compute_iad</text>
</g>
<g >
<title>.omp_outlined..132 (40,787,797 samples, 0.01%)</title><rect x="479.1" y="87" width="0.1" height="49.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="482.10" y="114.5" ></text>
</g>
<g >
<title>update_positions (691,559,683 samples, 0.13%)</title><rect x="1169.4" y="187" width="2.0" height="49.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1172.44" y="214.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (10,562,794,394 samples, 1.94%)</title><rect x="864.9" y="187" width="30.7" height="49.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="867.95" y="214.5" >__..</text>
</g>
<g >
<title>ilogbf32x (76,381,497 samples, 0.01%)</title><rect x="1163.5" y="187" width="0.2" height="49.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1166.51" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..70 (162,206,538 samples, 0.03%)</title><rect x="479.3" y="87" width="0.5" height="49.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="482.33" y="114.5" ></text>
</g>
<g >
<title>all (544,846,601,136 samples, 100%)</title><rect x="10.0" y="287" width="1580.0" height="49.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="314.5" ></text>
</g>
<g >
<title>update_temp (286,412,019 samples, 0.05%)</title><rect x="1171.9" y="187" width="0.8" height="49.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1174.91" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined. (651,983,374 samples, 0.12%)</title><rect x="13.7" y="187" width="1.9" height="49.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="16.68" y="214.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp@plt (895,629,861 samples, 0.16%)</title><rect x="895.6" y="187" width="2.6" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.58" y="214.5" ></text>
</g>
<g >
<title>start_thread (42,356,336 samples, 0.01%)</title><rect x="1165.0" y="187" width="0.1" height="49.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1168.01" y="214.5" ></text>
</g>
<g >
<title>[libopen-pal.so.40] (49,957,246 samples, 0.01%)</title><rect x="469.8" y="137" width="0.1" height="49.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="472.76" y="164.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::tuple&lt;unsigned long, unsigned int&gt;*, std::vector&lt;std::tuple&lt;unsigned long, unsigned int&gt;, util::DefaultInitAdaptor&lt;std::tuple&lt;unsigned long, unsigned int&gt;, std::allocator&lt;std::tuple&lt;unsigned long, unsigned int&gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (957,267,622 samples, 0.18%)</title><rect x="1166.7" y="187" width="2.7" height="49.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1169.66" y="214.5" ></text>
</g>
<g >
<title>[unknown] (136,241,506,803 samples, 25.01%)</title><rect x="469.7" y="187" width="395.1" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="472.74" y="214.5" >[unknown]</text>
</g>
<g >
<title>__kmp_release_ticket_lock (44,688,616 samples, 0.01%)</title><rect x="864.7" y="37" width="0.1" height="49.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="867.69" y="64.5" ></text>
</g>
<g >
<title>[libomp.so] (42,356,336 samples, 0.01%)</title><rect x="1165.0" y="137" width="0.1" height="49.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1168.01" y="164.5" ></text>
</g>
<g >
<title>sedov_wone (543,577,868,419 samples, 99.77%)</title><rect x="13.7" y="237" width="1576.3" height="49.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="16.68" y="264.5" >sedov_wone</text>
</g>
<g >
<title>.omp_outlined..3 (40,788,273 samples, 0.01%)</title><rect x="16.8" y="187" width="0.2" height="49.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="19.84" y="214.5" ></text>
</g>
<g >
<title>cstone::iHilbert&lt;unsigned long&gt; (11,978,971,106 samples, 2.20%)</title><rect x="1127.8" y="187" width="34.7" height="49.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1130.77" y="214.5" >cs..</text>
</g>
<g >
<title>_dl_map_object_from_fd (112,836,623 samples, 0.02%)</title><rect x="899.4" y="137" width="0.3" height="49.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="902.42" y="164.5" ></text>
</g>
<g >
<title>__sched_yield (325,595,716 samples, 0.06%)</title><rect x="898.5" y="187" width="0.9" height="49.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="901.48" y="214.5" ></text>
</g>
<g >
<title>.omp_outlined..71 (122,218,039 samples, 0.02%)</title><rect x="479.8" y="87" width="0.4" height="49.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="482.80" y="114.5" ></text>
</g>
<g >
<title>__kmp_launch_thread (42,356,336 samples, 0.01%)</title><rect x="1165.0" y="87" width="0.1" height="49.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1168.01" y="114.5" ></text>
</g>
<g >
<title>[unknown] (122,369,381 samples, 0.02%)</title><rect x="899.1" y="137" width="0.3" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="902.07" y="164.5" ></text>
</g>
<g >
<title>compute_momentum_energy_std (369,179,413 samples, 0.07%)</title><rect x="1123.8" y="187" width="1.0" height="49.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="1126.78" y="214.5" ></text>
</g>
<g >
<title>__kmp_finish_implicit_task (41,391,605 samples, 0.01%)</title><rect x="470.0" y="137" width="0.1" height="49.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="473.02" y="164.5" ></text>
</g>
<g >
<title>.omp_outlined..133 (117,542,022 samples, 0.02%)</title><rect x="16.2" y="187" width="0.3" height="49.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="19.16" y="214.5" ></text>
</g>
<g >
<title>cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (266,881,012 samples, 0.05%)</title><rect x="1162.5" y="187" width="0.8" height="49.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1165.50" y="214.5" ></text>
</g>
<g >
<title>orted (1,268,732,717 samples, 0.23%)</title><rect x="10.0" y="237" width="3.7" height="49.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.00" y="264.5" ></text>
</g>
<g >
<title>[libm-2.28.so] (2,631,767,759 samples, 0.48%)</title><rect x="19.5" y="187" width="7.6" height="49.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="22.45" y="214.5" ></text>
</g>
<g >
<title>[libopen-pal.so.40] (296,496,638 samples, 0.05%)</title><rect x="10.0" y="137" width="0.9" height="49.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="13.00" y="164.5" ></text>
</g>
<g >
<title>_dl_map_object (112,836,623 samples, 0.02%)</title><rect x="899.4" y="187" width="0.3" height="49.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="902.42" y="214.5" ></text>
</g>
<g >
<title>[libstdc++.so.6] (35,378,350 samples, 0.01%)</title><rect x="469.6" y="187" width="0.1" height="49.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="472.63" y="214.5" ></text>
</g>
<g >
<title>[libstdc++.so.6] (40,942,821 samples, 0.01%)</title><rect x="469.9" y="137" width="0.1" height="49.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="472.90" y="164.5" ></text>
</g>
<g >
<title>wash::recalculate_neighbours (143,887,220,327 samples, 26.41%)</title><rect x="1172.7" y="187" width="417.3" height="49.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1175.74" y="214.5" >wash::recalculate_neighbours</text>
</g>
<g >
<title>__kmp_invoke_task_func (3,453,720,120 samples, 0.63%)</title><rect x="470.1" y="137" width="10.1" height="49.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="473.14" y="164.5" ></text>
</g>
<g >
<title>[libomp.so] (152,609,081,918 samples, 28.01%)</title><rect x="27.1" y="187" width="442.5" height="49.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="30.08" y="214.5" >[libomp.so]</text>
</g>
<g >
<title>.omp_outlined..82 (40,580,097 samples, 0.01%)</title><rect x="19.3" y="187" width="0.2" height="49.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="22.33" y="214.5" ></text>
</g>
<g >
<title>cbrtf32x (1,134,758,032 samples, 0.21%)</title><rect x="899.8" y="187" width="3.3" height="49.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="902.79" y="214.5" ></text>
</g>
<g >
<title>compute_density (29,722,619,155 samples, 5.46%)</title><rect x="903.1" y="187" width="86.2" height="49.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="906.08" y="214.5" >compute_de..</text>
</g>
<g >
<title>compute_smoothing_length_neighbors (279,426,705 samples, 0.05%)</title><rect x="1124.8" y="187" width="0.9" height="49.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1127.85" y="214.5" ></text>
</g>
<g >
<title>[libstdc++.so.6] (35,378,350 samples, 0.01%)</title><rect x="469.6" y="87" width="0.1" height="49.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="472.63" y="114.5" ></text>
</g>
<g >
<title>scalbnf32x (41,068,713 samples, 0.01%)</title><rect x="1164.9" y="187" width="0.1" height="49.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1167.89" y="214.5" ></text>
</g>
<g >
<title>__kmp_internal_fork (37,130,455 samples, 0.01%)</title><rect x="898.3" y="187" width="0.1" height="49.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="901.29" y="214.5" ></text>
</g>
<g >
<title>[unknown] (409,347,233 samples, 0.08%)</title><rect x="12.5" y="137" width="1.2" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.47" y="164.5" ></text>
</g>
<g >
<title>cstone::hilbertIBox&lt;unsigned long&gt; (727,186,107 samples, 0.13%)</title><rect x="1125.7" y="187" width="2.1" height="49.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1128.66" y="214.5" ></text>
</g>
<g >
<title>pow@plt (121,516,139 samples, 0.02%)</title><rect x="1163.7" y="187" width="0.4" height="49.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1166.74" y="214.5" ></text>
</g>
</g>
</svg>
