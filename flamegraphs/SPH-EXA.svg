<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1600" height="370" onload="init(evt)" viewBox="0 0 1600 370" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1600.0" height="370.0" fill="url(#background)"  />
<text id="title" x="800.00" y="24" >SPH-EXA Flame Graph</text>
<text id="details" x="10.00" y="353" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1490.00" y="24" >Search</text>
<text id="ignorecase" x="1574.00" y="24" >ic</text>
<text id="matched" x="1490.00" y="353" > </text>
<g id="frames">
<g >
<title>sph::updatePositionsHost&lt;double, sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (2,182,658,511 samples, 0.21%)</title><rect x="1584.5" y="187" width="3.3" height="49.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1587.49" y="214.5" ></text>
</g>
<g >
<title>omp_get_num_threads (81,829,658 samples, 0.01%)</title><rect x="668.7" y="137" width="0.2" height="49.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="671.74" y="164.5" ></text>
</g>
<g >
<title>do_lookup_x (439,622,919 samples, 0.04%)</title><rect x="948.8" y="187" width="0.7" height="49.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="951.81" y="214.5" ></text>
</g>
<g >
<title>[libc-2.28.so] (494,562,922 samples, 0.05%)</title><rect x="10.0" y="187" width="0.8" height="49.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="13.00" y="214.5" ></text>
</g>
<g >
<title>orted (1,266,371,324 samples, 0.12%)</title><rect x="10.0" y="237" width="1.9" height="49.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.00" y="264.5" ></text>
</g>
<g >
<title>sph::findNeighborsSph&lt;double, float, unsigned long&gt; (608,053,481 samples, 0.06%)</title><rect x="1583.6" y="187" width="0.9" height="49.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1586.56" y="214.5" ></text>
</g>
<g >
<title>cstone::Halos&lt;unsigned long, cstone::CpuTag&gt;::discover&lt;double, float, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; (121,053,953 samples, 0.01%)</title><rect x="940.6" y="187" width="0.2" height="49.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="943.59" y="214.5" ></text>
</g>
<g >
<title>gomp_barrier_wait_end (121,599,187 samples, 0.01%)</title><rect x="23.6" y="37" width="0.2" height="49.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="26.62" y="64.5" ></text>
</g>
<g >
<title>[unknown] (215,724,705 samples, 0.02%)</title><rect x="10.8" y="187" width="0.3" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.75" y="214.5" ></text>
</g>
<g >
<title>ilogbf32 (567,965,578 samples, 0.05%)</title><rect x="666.4" y="137" width="0.9" height="49.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="669.44" y="164.5" ></text>
</g>
<g >
<title>pmix_server_fencenb_fn (204,793,004 samples, 0.02%)</title><rect x="10.8" y="37" width="0.3" height="49.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="13.75" y="64.5" ></text>
</g>
<g >
<title>sph::updateSmoothingLengthCpu&lt;float&gt; (706,069,118 samples, 0.07%)</title><rect x="936.5" y="137" width="1.1" height="49.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="939.49" y="164.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::tuple&lt;unsigned long, unsigned int&gt;*, std::vector&lt;std::tuple&lt;unsigned long, unsigned int&gt;, util::DefaultInitAdaptor&lt;std::tuple&lt;unsigned long, unsigned int&gt;, std::allocator&lt;std::tuple&lt;unsigned long, unsigned int&gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (1,217,166,784 samples, 0.12%)</title><rect x="938.6" y="137" width="1.8" height="49.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="941.56" y="164.5" ></text>
</g>
<g >
<title>cstone::minDistance&lt;double&gt; (20,989,583,928 samples, 2.03%)</title><rect x="490.0" y="137" width="32.0" height="49.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="492.99" y="164.5" >cs..</text>
</g>
<g >
<title>sphexa (1,034,344,189,763 samples, 99.88%)</title><rect x="11.9" y="237" width="1578.1" height="49.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="14.93" y="264.5" >sphexa</text>
</g>
<g >
<title>cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (486,051,000 samples, 0.05%)</title><rect x="665.7" y="87" width="0.7" height="49.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="668.70" y="114.5" ></text>
</g>
<g >
<title>cstone::computeSfcKeys&lt;double, StrongType&lt;unsigned long, cstone::HilbertKeyTag&gt; &gt; (27,346,397,740 samples, 2.64%)</title><rect x="623.8" y="87" width="41.7" height="49.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="626.80" y="114.5" >cst..</text>
</g>
<g >
<title>cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (655,033,337 samples, 0.06%)</title><rect x="947.8" y="187" width="1.0" height="49.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="950.81" y="214.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::tuple&lt;unsigned long, int&gt;*, std::vector&lt;std::tuple&lt;unsigned long, int&gt;, util::DefaultInitAdaptor&lt;std::tuple&lt;unsigned long, int&gt;, std::allocator&lt;std::tuple&lt;unsigned long, int&gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;cstone::sort_by_key&lt;unsigned long*, int*, std::less&lt;unsigned long&gt; &gt; (79,983,238 samples, 0.01%)</title><rect x="938.4" y="137" width="0.2" height="49.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="941.44" y="164.5" ></text>
</g>
<g >
<title>sph::computeIADImpl&lt;double, sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (102,251,521,960 samples, 9.87%)</title><rect x="780.5" y="137" width="156.0" height="49.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="783.49" y="164.5" >sph::computeIADImpl&lt;..</text>
</g>
<g >
<title>[unknown] (608,574,423,217 samples, 58.76%)</title><rect x="11.9" y="187" width="928.5" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.93" y="214.5" >[unknown]</text>
</g>
<g >
<title>cstone::findNeighbors&lt;double, float, unsigned long&gt; (302,576,909,409 samples, 29.22%)</title><rect x="26.3" y="137" width="461.6" height="49.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="29.27" y="164.5" >cstone::findNeighbors&lt;double, float, unsigned long&gt;</text>
</g>
<g >
<title>ilogbf@plt (571,318,719 samples, 0.06%)</title><rect x="667.3" y="137" width="0.9" height="49.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="670.31" y="164.5" ></text>
</g>
<g >
<title>gomp_barrier_wait_end (65,774,621,211 samples, 6.35%)</title><rect x="522.8" y="137" width="100.3" height="49.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="525.76" y="164.5" >gomp_barrier..</text>
</g>
<g >
<title>cstone::computeSfcKeys&lt;double, StrongType&lt;unsigned long, cstone::HilbertKeyTag&gt; &gt; (2,883,878,667 samples, 0.28%)</title><rect x="19.2" y="37" width="4.4" height="49.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="22.22" y="64.5" ></text>
</g>
<g >
<title>sph::computeEOS_HydroStdImpl&lt;sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (897,633,684 samples, 0.09%)</title><rect x="23.9" y="87" width="1.4" height="49.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="26.92" y="114.5" ></text>
</g>
<g >
<title>gomp_barrier_wait_end (2,738,652,638 samples, 0.26%)</title><rect x="949.5" y="187" width="4.2" height="49.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="952.48" y="214.5" ></text>
</g>
<g >
<title>cstone::nodeFpCenters&lt;unsigned long, double&gt; (853,669,652 samples, 0.08%)</title><rect x="946.4" y="187" width="1.3" height="49.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="949.39" y="214.5" ></text>
</g>
<g >
<title>cstone::rebalanceDecisionEssential&lt;unsigned long&gt; (80,856,455 samples, 0.01%)</title><rect x="947.7" y="187" width="0.1" height="49.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="950.69" y="214.5" ></text>
</g>
<g >
<title>gomp_thread_start (28,037,161,834 samples, 2.71%)</title><rect x="623.7" y="137" width="42.7" height="49.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="626.67" y="164.5" >gomp..</text>
</g>
<g >
<title>gomp_barrier_wait_end (2,617,709,161 samples, 0.25%)</title><rect x="11.9" y="87" width="4.0" height="49.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="14.93" y="114.5" ></text>
</g>
<g >
<title>cstone::gather&lt;unsigned int, float&gt; (686,091,845 samples, 0.07%)</title><rect x="488.9" y="137" width="1.0" height="49.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="491.88" y="164.5" ></text>
</g>
<g >
<title>[libopen-pal.so.40] (204,793,004 samples, 0.02%)</title><rect x="10.8" y="137" width="0.3" height="49.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="13.75" y="164.5" ></text>
</g>
<g >
<title>cstone::hilbertIBox&lt;unsigned long&gt; (1,053,992,941 samples, 0.10%)</title><rect x="944.4" y="187" width="1.6" height="49.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="947.40" y="214.5" ></text>
</g>
<g >
<title>cstone::containedIn&lt;unsigned long&gt; (522,933,648 samples, 0.05%)</title><rect x="940.8" y="137" width="0.8" height="49.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="943.77" y="164.5" ></text>
</g>
<g >
<title>dfs_traversal (555,135,837 samples, 0.05%)</title><rect x="11.1" y="187" width="0.8" height="49.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="14.09" y="214.5" ></text>
</g>
<g >
<title>GOMP_parallel (2,658,728,253 samples, 0.26%)</title><rect x="11.9" y="137" width="4.1" height="49.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="14.93" y="164.5" ></text>
</g>
<g >
<title>all (1,035,610,561,087 samples, 100%)</title><rect x="10.0" y="287" width="1580.0" height="49.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="314.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::tuple&lt;unsigned long, unsigned int&gt;*, std::vector&lt;std::tuple&lt;unsigned long, unsigned int&gt;, util::DefaultInitAdaptor&lt;std::tuple&lt;unsigned long, unsigned int&gt;, std::allocator&lt;std::tuple&lt;unsigned long, unsigned int&gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (1,427,923,066 samples, 0.14%)</title><rect x="1587.8" y="187" width="2.2" height="49.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1590.82" y="214.5" ></text>
</g>
<g >
<title>cstone::omp_copy&lt;unsigned long const*, __gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt; (79,902,515 samples, 0.01%)</title><rect x="665.6" y="87" width="0.1" height="49.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="668.58" y="114.5" ></text>
</g>
<g >
<title>sph::updateTempHost&lt;sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (522,467,143 samples, 0.05%)</title><rect x="25.3" y="87" width="0.8" height="49.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="28.29" y="114.5" ></text>
</g>
<g >
<title>sph::computeDensityImpl&lt;double, sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (72,877,949,065 samples, 7.04%)</title><rect x="669.3" y="137" width="111.2" height="49.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="672.30" y="164.5" >sph::computeD..</text>
</g>
<g >
<title>gomp_team_barrier_wait_final (326,451,294 samples, 0.03%)</title><rect x="623.2" y="137" width="0.5" height="49.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="626.17" y="164.5" ></text>
</g>
<g >
<title>sphexa::localConservedQuantities&lt;sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (571,782,839 samples, 0.06%)</title><rect x="937.6" y="137" width="0.8" height="49.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="940.57" y="164.5" ></text>
</g>
<g >
<title>gomp_barrier_wait (81,610,434 samples, 0.01%)</title><rect x="522.6" y="137" width="0.2" height="49.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="525.63" y="164.5" ></text>
</g>
<g >
<title>GOMP_parallel (3,005,477,854 samples, 0.29%)</title><rect x="19.2" y="87" width="4.6" height="49.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="22.22" y="114.5" ></text>
</g>
<g >
<title>cstone::sort_by_key&lt;unsigned long*, unsigned int*, std::less&lt;unsigned long&gt; &gt; (363,796,321 samples, 0.04%)</title><rect x="522.1" y="137" width="0.5" height="49.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="525.08" y="164.5" ></text>
</g>
<g >
<title>sph::computeMomentumEnergyStdImpl&lt;double, sphexa::ParticlesData&lt;double, unsigned long, cstone::CpuTag&gt; &gt; (291,354,589,059 samples, 28.13%)</title><rect x="1139.1" y="187" width="444.5" height="49.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1142.05" y="214.5" >sph::computeMomentumEnergyStdImpl&lt;double, sphexa::ParticlesD..</text>
</g>
<g >
<title>_IO_strn_overflow (494,562,922 samples, 0.05%)</title><rect x="10.0" y="137" width="0.8" height="49.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.00" y="164.5" ></text>
</g>
<g >
<title>cstone::minDistance&lt;double&gt; (247,950,015 samples, 0.02%)</title><rect x="946.0" y="187" width="0.4" height="49.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="949.01" y="214.5" ></text>
</g>
<g >
<title>[libm-2.28.so] (2,117,224,476 samples, 0.20%)</title><rect x="16.0" y="137" width="3.2" height="49.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="18.99" y="164.5" ></text>
</g>
<g >
<title>cstone::findNeighbors&lt;double, float, unsigned long&gt; (1,857,014,809 samples, 0.18%)</title><rect x="941.6" y="187" width="2.8" height="49.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="944.57" y="214.5" ></text>
</g>
<g >
<title>[unknown] (204,793,004 samples, 0.02%)</title><rect x="10.8" y="87" width="0.3" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.75" y="114.5" ></text>
</g>
<g >
<title>scalbnf32 (283,198,296 samples, 0.03%)</title><rect x="668.9" y="137" width="0.4" height="49.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="671.87" y="164.5" ></text>
</g>
<g >
<title>[unknown] (4,503,459,570 samples, 0.43%)</title><rect x="19.2" y="137" width="6.9" height="49.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="22.22" y="164.5" ></text>
</g>
<g >
<title>cstone::gather&lt;unsigned int, double&gt; (603,530,135 samples, 0.06%)</title><rect x="488.0" y="137" width="0.9" height="49.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="490.96" y="164.5" ></text>
</g>
<g >
<title>cstone::findHalos&lt;unsigned long, float, double&gt; (522,933,648 samples, 0.05%)</title><rect x="940.8" y="187" width="0.8" height="49.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="943.77" y="214.5" ></text>
</g>
<g >
<title>gomp_team_barrier_wait_end (121,473,483,355 samples, 11.73%)</title><rect x="953.7" y="187" width="185.3" height="49.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="956.66" y="214.5" >gomp_team_barrier_wait_end</text>
</g>
<g >
<title>mca_base_components_close (325,211,000 samples, 0.03%)</title><rect x="668.2" y="137" width="0.5" height="49.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="671.25" y="164.5" ></text>
</g>
</g>
</svg>
